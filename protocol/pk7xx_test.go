package protocol

import (
	"net"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestGLIMSDataTransmission(t *testing.T) {

	host, instrument := net.Pipe()

	go func() { // this is the instrument
		// a raw sample transmission of a single sample SB10 D ... DE
		raw := []byte{0x2, 0x53, 0x42, 0x31, 0x35, 0x3, 0x16, 0x2, 0x4D, 0x20, 0x31, 0x35, 0x61, 0x61, 0x61, 0x61, 0x61, 0x61, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x3, 0x5D, 0x2, 0x51, 0x52, 0x31, 0x35, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x37, 0x30, 0x30, 0x30, 0x31, 0x45, 0x45, 0x30, 0x31, 0x30, 0x31, 0x31, 0x41, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x36, 0x33, 0x31, 0x30, 0x35, 0x32, 0x30, 0x32, 0x33, 0x30, 0x32, 0x30, 0x32, 0x31, 0x42, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x31, 0x39, 0x38, 0x35, 0x33, 0x31, 0x30, 0x35, 0x32, 0x30, 0x32, 0x33, 0x30, 0x33, 0x30, 0x34, 0x31, 0x44, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x34, 0x33, 0x39, 0x33, 0x31, 0x30, 0x38, 0x32, 0x30, 0x32, 0x33, 0x30, 0x34, 0x30, 0x35, 0x31, 0x52, 0x68, 0x2D, 0x4B, 0x6F, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x32, 0x33, 0x31, 0x30, 0x35, 0x32, 0x30, 0x32, 0x33, 0x30, 0x35, 0x31, 0x37, 0x31, 0x43, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x38, 0x32, 0x38, 0x30, 0x32, 0x32, 0x30, 0x32, 0x33, 0x30, 0x36, 0x31, 0x38, 0x31, 0x63, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x37, 0x32, 0x38, 0x30, 0x32, 0x32, 0x30, 0x32, 0x33, 0x30, 0x37, 0x31, 0x39, 0x31, 0x45, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x30, 0x32, 0x38, 0x30, 0x32, 0x32, 0x30, 0x32, 0x33, 0x30, 0x38, 0x32, 0x30, 0x31, 0x65, 0x2D, 0x31, 0x20, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x35, 0x35, 0x30, 0x33, 0x31, 0x30, 0x38, 0x32, 0x30, 0x32, 0x32, 0x30, 0x39, 0x32, 0x31, 0x31, 0x4B, 0x65, 0x6C, 0x2D, 0x31, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x34, 0x33, 0x32, 0x38, 0x30, 0x32, 0x32, 0x30, 0x32, 0x33, 0x3, 0x6E, 0x2, 0x51, 0x44, 0x31, 0x35, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x37, 0x30, 0x30, 0x30, 0x31, 0x45, 0x45, 0x30, 0x31, 0x30, 0x31, 0x20, 0x42, 0x72, 0x6F, 0x6D, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x39, 0x38, 0x34, 0x33, 0x30, 0x30, 0x36, 0x32, 0x30, 0x32, 0x32, 0x30, 0x33, 0x30, 0x31, 0x20, 0x42, 0x72, 0x6F, 0x6D, 0x20, 0x44, 0x69, 0x61, 0x67, 0x61, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x39, 0x38, 0x36, 0x33, 0x30, 0x30, 0x36, 0x32, 0x30, 0x32, 0x32, 0x3, 0x17, 0x2, 0x44, 0x42, 0x31, 0x35, 0x3, 0x1, 0x2, 0x44, 0x20, 0x31, 0x35, 0x32, 0x31, 0x30, 0x31, 0x32, 0x30, 0x32, 0x32, 0x31, 0x32, 0x30, 0x37, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x41, 0x34, 0x41, 0x31, 0x41, 0x30, 0x45, 0x38, 0x46, 0x30, 0x30, 0x30, 0x31, 0x30, 0x30, 0x30, 0x31, 0x20, 0x20, 0x45, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x20, 0x2D, 0x20, 0x2B, 0x20, 0x2D, 0x20, 0x2B, 0x20, 0x2B, 0x20, 0x2B, 0x20, 0x2B, 0x20, 0x2D, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x41, 0x42, 0x4F, 0x32, 0x20, 0x4F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x45, 0x2D, 0x32, 0x20, 0x43, 0x63, 0x45, 0x65, 0x20, 0x20, 0x20, 0x20, 0x44, 0x2D, 0x32, 0x20, 0x20, 0x52, 0x48, 0x2B, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4B, 0x2D, 0x32, 0x20, 0x20, 0x4B, 0x45, 0x4C, 0x4C, 0x20, 0x2D, 0x20, 0x20, 0x52, 0x68, 0x43, 0x32, 0x20, 0x43, 0x4F, 0x4E, 0x54, 0x52, 0x2D, 0x20, 0x4D, 0x30, 0x31, 0x37, 0x34, 0x31, 0x31, 0x36, 0x37, 0x34, 0x30, 0x20, 0x37, 0x35, 0x35, 0x30, 0x32, 0x37, 0x33, 0x31, 0x33, 0x35, 0x36, 0x33, 0x38, 0x20, 0x35, 0x39, 0x33, 0x30, 0x33, 0x36, 0x30, 0x34, 0x36, 0x31, 0x33, 0x30, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x34, 0x37, 0x31, 0x31, 0x32, 0x35, 0x39, 0x33, 0x36, 0x20, 0x35, 0x38, 0x38, 0x30, 0x35, 0x35, 0x39, 0x34, 0x36, 0x31, 0x33, 0x30, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x36, 0x35, 0x38, 0x34, 0x35, 0x31, 0x33, 0x30, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x30, 0x34, 0x30, 0x31, 0x35, 0x30, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x38, 0x36, 0x32, 0x35, 0x31, 0x31, 0x32, 0x30, 0x32, 0x20, 0x30, 0x30, 0x30, 0x30, 0x39, 0x37, 0x35, 0x31, 0x33, 0x35, 0x38, 0x33, 0x39, 0x20, 0x35, 0x37, 0x31, 0x3, 0x7, 0x2, 0x44, 0x45, 0x31, 0x35, 0x03, 0x06}
		instrument.Write(raw)
	}()

	// from here on we become the host :) - (thats ourselfes)
	instance := Logger(PK7xxProtocol())

	r1message, err := instance.Receive(host)
	assert.Nil(t, err)
	assert.Equal(t, "", string(r1message))

}

// A test where 02 'S' and then trash tries to crash the connection, expecting the fsm to reset
